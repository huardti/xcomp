cmake_minimum_required(VERSION 3.7)
project(xcomp VERSION 0.1)

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type selected, default to Debug (-DCMAKE_BUILD_TYPE=Release) if you need release build")
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# set the project name and version



# check compiler version for C++17 features
if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Wall)
    add_definitions(-Wextra)
    add_definitions(-W)
    add_definitions(-Wpedantic)
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpfullversion -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    string(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
    list(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
    list(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)
    set(GCC_VERSION ${GCC_MAJOR}.${GCC_MINOR})

    add_definitions(-std=c++17)
    if(CMAKE_BUILD_TYPE STREQUAL Release)
        add_definitions(-Werror)
    endif()

    if(GCC_VERSION VERSION_LESS 8.0)
        message(ERROR ": requires advanced features from the C++17 norm that are only available with gcc 8 or higher (your version: ${GCC_VERSION}). Please upgrade your compiler.")
    endif()

elseif(MSVC)
    add_definitions(/DMSVC)
    add_definitions(/W4)
    add_definitions(/GR)
    add_definitions(/EHs)
    add_definitions(/std:c++17)
    add_definitions(/D_CRT_SECURE_NO_DEPRECATE)

    if(MSVC_VERSION VERSION_LESS 1910)
        message(ERROR ": requires advanced features from the C++17 norm that are only available with MSVC 2017 or higher (version 1910, your version: ${MSVC_VERSION}). Please upgrade your compiler.")
    endif()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 11)
            message(ERROR ":requires advanced features from the C++17 norm that are only available with Xcode 11 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
        endif()
    else()
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7)
            message(ERROR ":requires advanced features from the C++17 norm that are only available with clang 7 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
        endif()
    endif()

    add_definitions(-Weverything)
    add_definitions(-Wno-c++98-compat-pedantic)
    add_definitions(-Wno-c++98-compat)
    add_definitions(-Wno-unused-parameter)
    add_definitions(-Wno-sign-conversion)
    add_definitions(-Wno-conversion)
    add_definitions(-Wno-missing-variable-declarations)
    add_definitions(-Wno-missing-prototypes)
    add_definitions(-Wno-padded)
    add_definitions(-Wno-float-equal)
    add_definitions(-Wno-unused-variable)
    add_definitions(-Wno-global-constructors)
    add_definitions(-Wno-exit-time-destructors)
    add_definitions(-Wno-weak-vtables)
    add_definitions(-Wno-covered-switch-default)
    add_definitions(-Wno-documentation-unknown-command)
    add_definitions(-Wno-unneeded-internal-declaration)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-macros)
    add_definitions(-Wno-switch-enum)
    add_definitions(-Wno-zero-as-null-pointer-constant)
    add_definitions(-Wno-reserved-id-macro)
    add_definitions(-Wno-old-style-cast)
    add_definitions(-Wno-double-promotion)
    add_definitions(-Wno-unused-template)
    add_definitions(-Wno-used-but-marked-unused)
    add_definitions(-Wno-shadow-field-in-constructor)
    add_definitions(-Wno-disabled-macro-expansion)
    add_definitions(-Wno-extra-semi)
    add_definitions(-Wno-documentation)
    add_definitions(-Wno-undef)
    add_definitions(-Wno-newline-eof)
    add_definitions(-Wno-redundant-parens)
    add_definitions(-Wno-comma)
    add_definitions(-Wno-c++20-compat)
    add_definitions(-Wno-missing-noreturn)
    add_definitions(-Wno-shadow-uncaptured-local)
    add_definitions(-Wno-shadow)
    add_definitions(-Wno-undefined-reinterpret-cast)
    add_definitions(-std=c++17)
else()
    message(WARNING "Warning: your compiler has not been setup by the CMake script, do not expect it to work")
endif()

# set OS preprocessor defines
if (APPLE)
    add_definitions(-DMACOSX)
elseif (UNIX)
    add_definitions(-DLINUX)
elseif (WINDOWS)
    add_definitions(-DWIN32)
endif()

# find libraries

# include header from lib

# executable build rules
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

add_subdirectory(preprocessor)
add_subdirectory(xcomp)
